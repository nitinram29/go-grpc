// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LearnService_UnaryCall_FullMethodName                  = "/learn_service.LearnService/UnaryCall"
	LearnService_ServerStreamingCall_FullMethodName        = "/learn_service.LearnService/ServerStreamingCall"
	LearnService_ClientStreamingCall_FullMethodName        = "/learn_service.LearnService/ClientStreamingCall"
	LearnService_BiDirectionalStreamingCall_FullMethodName = "/learn_service.LearnService/BiDirectionalStreamingCall"
)

// LearnServiceClient is the client API for LearnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearnServiceClient interface {
	UnaryCall(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*AckResponse, error)
	ServerStreamingCall(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AckResponse], error)
	ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UserRequest, MessageList], error)
	BiDirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserRequest, AckResponse], error)
}

type learnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearnServiceClient(cc grpc.ClientConnInterface) LearnServiceClient {
	return &learnServiceClient{cc}
}

func (c *learnServiceClient) UnaryCall(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, LearnService_UnaryCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) ServerStreamingCall(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LearnService_ServiceDesc.Streams[0], LearnService_ServerStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NamesList, AckResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LearnService_ServerStreamingCallClient = grpc.ServerStreamingClient[AckResponse]

func (c *learnServiceClient) ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UserRequest, MessageList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LearnService_ServiceDesc.Streams[1], LearnService_ClientStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserRequest, MessageList]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LearnService_ClientStreamingCallClient = grpc.ClientStreamingClient[UserRequest, MessageList]

func (c *learnServiceClient) BiDirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UserRequest, AckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LearnService_ServiceDesc.Streams[2], LearnService_BiDirectionalStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserRequest, AckResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LearnService_BiDirectionalStreamingCallClient = grpc.BidiStreamingClient[UserRequest, AckResponse]

// LearnServiceServer is the server API for LearnService service.
// All implementations must embed UnimplementedLearnServiceServer
// for forward compatibility.
type LearnServiceServer interface {
	UnaryCall(context.Context, *NoParam) (*AckResponse, error)
	ServerStreamingCall(*NamesList, grpc.ServerStreamingServer[AckResponse]) error
	ClientStreamingCall(grpc.ClientStreamingServer[UserRequest, MessageList]) error
	BiDirectionalStreamingCall(grpc.BidiStreamingServer[UserRequest, AckResponse]) error
	mustEmbedUnimplementedLearnServiceServer()
}

// UnimplementedLearnServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearnServiceServer struct{}

func (UnimplementedLearnServiceServer) UnaryCall(context.Context, *NoParam) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (UnimplementedLearnServiceServer) ServerStreamingCall(*NamesList, grpc.ServerStreamingServer[AckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingCall not implemented")
}
func (UnimplementedLearnServiceServer) ClientStreamingCall(grpc.ClientStreamingServer[UserRequest, MessageList]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingCall not implemented")
}
func (UnimplementedLearnServiceServer) BiDirectionalStreamingCall(grpc.BidiStreamingServer[UserRequest, AckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalStreamingCall not implemented")
}
func (UnimplementedLearnServiceServer) mustEmbedUnimplementedLearnServiceServer() {}
func (UnimplementedLearnServiceServer) testEmbeddedByValue()                      {}

// UnsafeLearnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearnServiceServer will
// result in compilation errors.
type UnsafeLearnServiceServer interface {
	mustEmbedUnimplementedLearnServiceServer()
}

func RegisterLearnServiceServer(s grpc.ServiceRegistrar, srv LearnServiceServer) {
	// If the following call pancis, it indicates UnimplementedLearnServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LearnService_ServiceDesc, srv)
}

func _LearnService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearnService_UnaryCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).UnaryCall(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_ServerStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NamesList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LearnServiceServer).ServerStreamingCall(m, &grpc.GenericServerStream[NamesList, AckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LearnService_ServerStreamingCallServer = grpc.ServerStreamingServer[AckResponse]

func _LearnService_ClientStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LearnServiceServer).ClientStreamingCall(&grpc.GenericServerStream[UserRequest, MessageList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LearnService_ClientStreamingCallServer = grpc.ClientStreamingServer[UserRequest, MessageList]

func _LearnService_BiDirectionalStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LearnServiceServer).BiDirectionalStreamingCall(&grpc.GenericServerStream[UserRequest, AckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LearnService_BiDirectionalStreamingCallServer = grpc.BidiStreamingServer[UserRequest, AckResponse]

// LearnService_ServiceDesc is the grpc.ServiceDesc for LearnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "learn_service.LearnService",
	HandlerType: (*LearnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    _LearnService_UnaryCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingCall",
			Handler:       _LearnService_ServerStreamingCall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingCall",
			Handler:       _LearnService_ClientStreamingCall_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDirectionalStreamingCall",
			Handler:       _LearnService_BiDirectionalStreamingCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
